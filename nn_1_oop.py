# -*- coding: utf-8 -*-
"""nn_1_oop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AU8CSGqqfZYc7RnNXsG3X10u3_rGi6z5

This code was used for academia purposes and will only be used for educational use.

Training a neural network with back propagation and gradient descent to minimize the mse
"""

# Commented out IPython magic to ensure Python compatibility.
#https://www.baeldung.com/cs/reinforcement-learning-neural-network
#http://outlace.com/rlpart3.html
#https://github.com/jeffhc/malmoAI/blob/master/gridworld_qlearning_nn.ipynb
#https://towardsdatascience.com/part-1-building-a-deep-q-network-to-play-gridworld-deepminds-deep-q-networks-78842007c631
import random
import numpy as np
import matplotlib.pyplot as plt
import pylab as pl
import pandas as pd
import tensorflow as tf
from keras.models import Sequential
from keras.layers import InputLayer
from keras.layers.core import Dense, Dropout, Activation
from keras.optimizers import Optimizer 
# %matplotlib inline

def randPair(s,e):
    return np.random.randint(s,e), np.random.randint(s,e)

class BoardPiece:
    
    def __init__(self, name, code, pos):
        self.name = name #name of the piece
        self.code = code #an ASCII character to display on the board
        self.pos = pos #2-tuple e.g. (1,4)

class GridBoard:
    
    def __init__(self, size=4):
        self.size = size #Board dimensions, e.g. 4 x 4
        self.components = {} #name : board piece
    
    def addPiece(self, name, code, pos=(0,0)):
        newPiece = BoardPiece(name, code, pos)
        self.components[name] = newPiece
    
    def movePiece(self, name, pos):
        self.components[name].pos = pos
    
    def delPiece(self, name):
        del self.components['name']
    
    def render(self):
        dtype = '<U2'
        displ_board = np.zeros((self.size, self.size), dtype=dtype)
        displ_board[:] = ' '
        
        for name, piece in self.components.items():
            displ_board[piece.pos] = piece.code
        return displ_board
    
    def render_np(self):
        num_pieces = len(self.components)
        displ_board = np.zeros((num_pieces, self.size, self.size), dtype=np.uint8)
        layer = 0
        for name, piece in self.components.items():
            pos = (layer,) + piece.pos
            displ_board[pos] = 1
            layer += 1
        return displ_board
        
        
def addTuple(a,b):
    return tuple([sum(x) for x in zip(a,b)])

class Gridworld:
    
    def __init__(self, size=4, mode='static'):
        if size >= 4:
            self.board = GridBoard(size=size)
        else:
            print("Minimum board size is 4. Initialized to size 4.")
            self.board = GridBoard(size=4)
        
        #Add pieces, positions will be updated later
        self.board.addPiece('Player','P',(0,0))
        self.board.addPiece('Goal','+',(1,0))
        self.board.addPiece('Pit','-',(2,0))
        self.board.addPiece('Wall','W',(3,0))
            
        if mode == 'static':
            self.initGridStatic()
        elif mode == 'player':
            self.initGridPlayer()
        else:
            self.initGridRand()
    
    #Initialize stationary grid, all items are placed deterministically
    def initGridStatic(self):
        #Setup static pieces
        self.board.components['Player'].pos = (0,3)
        self.board.components['Goal'].pos = (0,0)
        self.board.components['Pit'].pos = (0,1)
        self.board.components['Wall'].pos = (1,1)
    
    #Check if board is initialized appropriately (no overlapping pieces)
    def validateBoard(self):
        all_positions = [piece.pos for name,piece in self.board.components.items()]
        if len(all_positions) > len(set(all_positions)):
            return False
        else:
            return True

    #Initialize player in random location, but keep wall, goal and pit stationary
    def initGridPlayer(self):
        #height x width x depth (number of pieces)
        self.initGridStatic()
        #place player
        self.board.components['Player'].pos = randPair(0,self.board.size)

        if (not self.validateBoard()):
            #print('Invalid grid. Rebuilding..')
            self.initGridPlayer()

    #Initialize grid so that goal, pit, wall, player are all randomly placed
    def initGridRand(self):
        #height x width x depth (number of pieces)
        self.board.components['Player'].pos = randPair(0,self.board.size)
        self.board.components['Goal'].pos = randPair(0,self.board.size)
        self.board.components['Pit'].pos = randPair(0,self.board.size)
        self.board.components['Wall'].pos = randPair(0,self.board.size)

        if (not self.validateBoard()):
            #print('Invalid grid. Rebuilding..')
            self.initGridRand()

    def makeMove(self, action):
        #need to determine what object (if any) is in the new grid spot the player is moving to
        #actions in {u,d,l,r}
        def checkMove(addpos=(0,0)):
            new_pos = addTuple(self.board.components['Player'].pos, addpos)
            if new_pos == self.board.components['Wall'].pos:
                pass #block move, player can't move to wall
            elif max(new_pos) > (self.board.size-1):    #if outside bounds of board
                pass
            elif min(new_pos) < 0: #if outside bounds
                pass
            else:
                self.board.movePiece('Player', new_pos)
        if action == 'u': #up
            checkMove((-1,0))
        elif action == 'd': #down
            checkMove((1,0))
        elif action == 'l': #left
            checkMove((0,-1))
        elif action == 'r': #right
            checkMove((0,1))
        else:
            pass

    def getReward(self):
        if (self.board.components['Player'].pos == self.board.components['Pit'].pos):
            return -10
        elif (self.board.components['Player'].pos == self.board.components['Goal'].pos):
            return 10
        else:
            return -1

    def dispGrid(self):
        return self.board.render()

gridptr = Gridworld()
state = gridptr.initGridRand()
print(gridptr.dispGrid())

state = gridptr.makeMove('d')
state = gridptr.makeMove('l')
state = gridptr.makeMove('l')
state = gridptr.makeMove('d')

print(gridptr.dispGrid())

print('Reward: %s' % (gridptr.getReward(),))

model = Sequential()
model.add(Dense(164, kernel_initializer='lecun_uniform', input_shape=(64,)))
model.add(Activation('relu'))
#model.add(Dropout(0.2)) I'm not using dropout, but maybe you wanna give it a try?
model.add(Dense(150, kernel_initializer='lecun_uniform'))
model.add(Activation('relu'))
#model.add(Dropout(0.2))
model.add(Dense(4, kernel_initializer='lecun_uniform'))
model.add(Activation('linear')) #linear output so we can have range of real-valued outputs

model.compile(loss='mse',
  optimizer=tf.keras.optimizers.RMSprop(lr=2e-5),
  metrics=['acc'])

model.predict(gridptr.board.render_np().reshape(1,64), batch_size=1)

state = gridptr.initGridStatic()
print(state)

from IPython.display import clear_output
import random

epochs = 1000
gamma = 0.9 #since it may take several moves to goal, making gamma high
epsilon = 1
for i in range(epochs):
    state = gridptr.initGridStatic()
    status = 1
    while(status==1):
        qval = model.predict(state.reshape(1,64), batch_size=1)